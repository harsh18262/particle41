name: Build and Deploy Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  DOCKER_REPOSITORY: simple-time-service
  ECS_SERVICE: simple-time-service
  ECS_CLUSTER: simple-time-cluster

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build, tag, and push image to Docker Hub
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to Docker Hub
        cd app
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG .
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:latest .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:latest
        echo "image=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Run security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.build-image.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: build
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate
      
    - name: debug echo
      run: echo "${{ needs.build.outputs.image-uri }}"

    - name: Terraform Plan
      id: tf-plan
      working-directory: ./terraform
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan \
          -var="container_image=${{ needs.build.outputs.image-uri }}" || export exitcode=$?
        
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        echo "Terraform Plan Exit Code: $exitcode"
        
        if [ $exitcode -eq 1 ]; then
          echo "‚ùå Terraform Plan Failed!"
          exit 1
        elif [ $exitcode -eq 0 ]; then
          echo "‚úÖ Terraform Plan Successful - No changes detected"
          exit 0
        elif [ $exitcode -eq 2 ]; then
          echo "‚úÖ Terraform Plan Successful - Changes detected"
          exit 0
        else
          echo "‚ùå Terraform Plan returned unexpected exit code: $exitcode"
          exit 1
        fi

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: terraform/tfplan

    - name: Create String Output
      id: tf-plan-string
      working-directory: ./terraform
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    - name: Comment Terraform Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const body = `${process.env.SUMMARY}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [build, terraform-plan]
    if: github.ref == 'refs/heads/main' && (needs.terraform-plan.outputs.tfplanExitCode == '2' || needs.terraform-plan.outputs.tfplanExitCode == '0')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: terraform/
    
    - name: Backup Current State
      working-directory: ./terraform
      run: |
        # Create backup directory
        mkdir -p ../terraform-backups
        
        # Create timestamped backup
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        COMMIT_SHA="${{ github.sha }}"
        BACKUP_FILE="../terraform-backups/terraform-state-${TIMESTAMP}-${COMMIT_SHA:0:8}.json"
        
        # Export current state (this works even with remote state)
        terraform show -json > "$BACKUP_FILE"
        
        # Also backup raw state if exists locally
        if [ -f "terraform.tfstate" ]; then
          cp terraform.tfstate "../terraform-backups/terraform-${TIMESTAMP}.tfstate"
        fi
        
        echo "State backup created: $BACKUP_FILE"
        ls -la ../terraform-backups/

    - name: Upload Pre-Apply State Backup
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-pre-apply-backup-${{ github.sha }}
        path: terraform-backups/
        retention-days: 30

    - name: Terraform Apply
      working-directory: ./terraform
      run: |
        echo "Applying Terraform plan..."
        echo "Plan exit code was: ${{ needs.terraform-plan.outputs.tfplanExitCode }}"
        terraform apply -auto-approve tfplan
    
    - name: Backup Post-Apply State
      if: always()
      working-directory: ./terraform
      run: |
        # Create post-apply backup directory
        mkdir -p ../terraform-post-apply
        
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        COMMIT_SHA="${{ github.sha }}"
        
        # Export final state
        terraform show -json > "../terraform-post-apply/terraform-final-state-${TIMESTAMP}-${COMMIT_SHA:0:8}.json"
        
        # Copy state files if they exist
        if [ -f "terraform.tfstate" ]; then
          cp terraform.tfstate "../terraform-post-apply/"
        fi
        if [ -f "terraform.tfstate.backup" ]; then
          cp terraform.tfstate.backup "../terraform-post-apply/"
        fi

    - name: Upload Post-Apply State
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-post-apply-state-${{ github.sha }}
        path: terraform-post-apply/
        retention-days: 30

    - name: Get Terraform Outputs
      id: tf-outputs
      working-directory: ./terraform
      run: |
        echo "cloudfront-url=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_OUTPUT

    - name: Create Deployment Summary
      if: steps.tf-apply.outputs.apply-exit-code == '0'
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Application Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image**: ${{ needs.build.outputs.image-uri }}" >> $GITHUB_STEP_SUMMARY
        echo "- **CloudFront URL**: https://${{ steps.tf-outputs.outputs.cloudfront-url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Hub Repository**: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### State Backups" >> $GITHUB_STEP_SUMMARY
        echo "- Pre-apply state backup: terraform-pre-apply-backup-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Post-apply state backup: terraform-post-apply-state-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Access Your Application" >> $GITHUB_STEP_SUMMARY
        echo "üåê [Open Application](https://${{ steps.tf-outputs.outputs.cloudfront-url }})" >> $GITHUB_STEP_SUMMARY

    - name: Create Failure Summary
      if: steps.tf-apply.outputs.apply-exit-code != '0'
      run: |
        echo "## ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image**: ${{ needs.build.outputs.image-uri }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Apply Exit Code**: ${{ steps.tf-apply.outputs.apply-exit-code }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### State Backups" >> $GITHUB_STEP_SUMMARY
        echo "- Pre-apply state backup: terraform-pre-apply-backup-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Post-apply state backup: terraform-post-apply-state-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the job logs for detailed error information." >> $GITHUB_STEP_SUMMARY

    - name: Fail Job if Apply Failed
      if: steps.tf-apply.outputs.apply-exit-code != '0'
      run: |
        echo "‚ùå Terraform apply failed!"
        echo "State backups have been preserved in artifacts."
        exit 1

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build, terraform-apply]
    if: always()
    
    steps:
    - name: Notification
      run: |
        if [ "${{ needs.terraform-apply.result }}" == "success" ]; then
          echo "‚úÖ Deployment completed successfully!"
        elif [ "${{ needs.terraform-apply.result }}" == "failure" ]; then
          echo "‚ùå Deployment failed!"
          exit 1
        else
          echo "‚ÑπÔ∏è Deployment was skipped or cancelled"
        fi